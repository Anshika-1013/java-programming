// CorrectedThread.java
class CorrectedThread implements Runnable {
    private String name;
    private int priority;

    public CorrectedThread(String name, int priority) {
        this.name = name;
        this.priority = priority;
    }

    public int getPriority() {
        return priority;
    }

    public String getName() {
        return name;
    }

    @Override
    public void run() {
        System.out.println(name + " is shopping.");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(name + " is ready to check out.");
    }
}

// Supermarket.java
class Supermarket {
    public synchronized void processCustomer(CorrectedThread customer) {
        System.out.println("Processing " + customer.getName() + " at checkout.");
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println(customer.getName() + " has checked out.");
    }
}

// Main.java
public class Main {
    public static void main(String[] args) {
        Supermarket supermarket = new Supermarket();
        CorrectedThread[] customers = new CorrectedThread[5];
        Thread[] threads = new Thread[5];

        for (int i = 0; i < 5; i++) {
            customers[i] = new CorrectedThread("Customer " + (i + 1), i);
            
            // Use constants for valid priority values
            int validPriority = Math.max(Thread.MIN_PRIORITY, Math.min(Thread.MAX_PRIORITY, customers[i].getPriority()));
            
            threads[i] = new Thread(customers[i]);
            threads[i].setPriority(validPriority);
            threads[i].start();
        }

        // Separate the loop for joining threads and processing customers
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        // Process customers after all threads have finished
        for (CorrectedThread customer : customers) {
            supermarket.processCustomer(customer);
        }
    }
}


